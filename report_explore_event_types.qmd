---
title: "Explore Events (not finalized)"
editor: source
format: 
 html:
   embed-resources: true
   toc: true
   toc-location: left
execute:
    echo: false
    message: false
    warning: false
---


```{r}
#todo list
#fix order on bard to be greatest to least within facet
#fix Unclassified events
```


```{r}
library(tidyverse)
library(arrow)
library(dtplyr)
library(DT)
library(scales)
library(stringr)

custom_location_fill<-function(){scale_fill_hue(h = c(165, 525), c = 80, l = 75)}
custom_location_color<-function(){scale_color_hue(h = c(165, 525), c = 80, l = 75)}



source('functions/DT_base.R') #functions to parse remarks and protocols
source('functions/fxn_disease.R') #functions to parse remarks and protocols

events_parsed<-read_parquet('data/intermediate_files/events_parsed.parquet')%>%
  filter(date_event>(today()-90))


summarize_events_by_location<-events_parsed |> 
  group_by(event_type, location_event,  event) |> 
  summarize(count_rows=sum(n()))|>
  ungroup()%>%
  mutate(event_type = factor(event_type), 
         event = factor(event))%>%
  arrange(event_type, location_event, count_rows)%>%
  rowid_to_column()%>%
  rename(plot_order = rowid)

trend_events_by_location<-events_parsed |> 
  mutate(floordate_month = floor_date(date_event, unit = 'months'))%>%
  group_by(event_type, location_event, floordate_month, event) |> 
  summarize(count_rows=sum(n()))|>
  ungroup()%>%
  mutate(event_type = factor(event_type), 
         event = factor(event))




```



## Dairy Overview

### Active Animal Counts

```{r}
active_animals<-events_parsed%>%
  filter(is.na(date_archived))%>%
  group_by(id_animal, lact_group)%>%
  summarize(location_event = paste0(sort(unique(location_event)), collapse = ','))%>%
  ungroup()%>%
  group_by(location_event, lact_group)%>%
  summarize(animals = n_distinct(id_animal))%>%
  ungroup()

ggplot(active_animals)+
  geom_col(aes(x = lact_group, y = animals, fill = location_event))+
  facet_wrap(location_event~., scales = 'free_x')+
  coord_flip()+
  theme_bw()+
  custom_location_fill()
```


### Trend Lactation Parameters 

This graphs shows fundamental events that occurred at each "location" for past 5 years

```{r}
ggplot(trend_events_by_location%>%
         filter(event_type %in% "lact_parameter")%>% #only look at lactation parameter events
         filter(floordate_month>(floor_date((today()-1095), unit = 'months')))%>% #only look back 3 years
         filter(floordate_month<(floor_date(today(), unit = 'months'))) #don't include the current month because it isn't complete
       )+
  geom_point(aes(x = floordate_month,
               y = count_rows, color = event), size = .2)+
    geom_smooth(aes(x = floordate_month,
               y = count_rows, color = event, group = event), span = .2, se = FALSE)+

    facet_wrap(location_event ~., scales = 'free', nrow = 2)+
   scale_fill_viridis_d()+
  theme_bw()
```


### Proportions of Lactation Parameters by Month

This graph demonstrates the proportion of events each month by event type.  Exploration of this allows detection of changes in system


```{r}
ggplot(trend_events_by_location%>%
         filter(event_type %in% "lact_parameter")%>% #only look at lactation parameter events
         filter(floordate_month>(floor_date((today()-1095), unit = 'months')))%>% #only look back 3 years
         filter(floordate_month<(floor_date(today(), unit = 'months')))%>% #don't include the current month because it isn't complete
         mutate(event = factor(event, levels = c('DIED','SOLD','DRY','FRESH')))
       )+
  geom_bar(aes(x = floordate_month,
               y = count_rows, fill = event), 
               stat = 'identity', position = position_fill())+
    facet_wrap(location_event ~., scales = 'free', nrow = 2)+
  scale_fill_viridis_d()+
  theme_bw()+
  ylab('Proportion of Rows')


  
```

### Event Relationships - (just for fun)

Each dot is a  floordate month in the trend data.  This graphic plots the count of FRESH events on the x axis, and the count of events causing an animal to no longer be in the milking string (died + sold + dry) on the y axis.


```{r}

trend_event_relationships<-trend_events_by_location%>%
         filter(event_type %in% "lact_parameter")%>%
         filter(floordate_month>(floor_date((today()-1095), unit = 'months')))%>%
        pivot_wider(names_from = event, values_from = count_rows)%>%
  mutate(LEFT = DIED+SOLD,
         NotMilking = DIED+SOLD+DRY)

ggplot(trend_event_relationships)+
  geom_abline(intercept = 1, slope = 1, linetype = 'dashed', color = 'grey')+
  geom_point(aes(x = FRESH,
               y = NotMilking, color = location_event), size = .2)+
   geom_smooth(aes(x = FRESH,
               y = NotMilking, color = location_event, fill = location_event),
               alpha = .2, span = 1)+

    #facet_wrap(location_event ~., scales = 'free', nrow = 2)+
  custom_location_fill()+
  custom_location_color()+
  #theme_minimal()+
  theme_bw()+
  theme(aspect.ratio = 1)


```


## Health Events

List of diseases
```{r}
# order events
health_details<-events_parsed%>% 
  filter((event_type %in% c('health')))%>%
  group_by(event,  disease, protocols, location_event)%>%
  summarize(ct_row = sum(n()), 
            ct_animals = n_distinct(id_animal), 
            list_remarks = paste0(sort(unique(remark_letters1)), collapse = ',')
            )%>%
  ungroup()


list_dz<-paste0(sort(unique(health_details$disease)))
list_dz
```

## Diseases Recorded

```{r}

health_details %>%
  group_by(location_event, disease) %>%
  mutate(ct_row = sum(ct_row)) %>%
  ungroup() %>%
  arrange(location_event, ct_row)%>%
  rowid_to_column()%>%
  mutate(plot_order = rowid)%>%
  mutate(disease = factor(disease, 
                          levels = sort(unique(health_details$disease))))%>%
  
  ggplot() +
  geom_col(aes(x = disease, y = ct_row, fill = location_event)) +
  facet_wrap(. ~ location_event, scales = 'free_x') +
  coord_flip()+
  custom_location_fill()+
  theme_bw()+
  theme(axis.text.x = element_text(angle = 45, hjust =1))




```

### Protocols by Disease

```{r}
#i=1
for (i in seq_along(list_dz)){


# Ensure consistent x-axis factor levels across all facets
health_details_fixed <- health_details %>%
  mutate(protocols = factor(protocols, 
                            levels = sort(unique(health_details$protocols))))%>%
  mutate(example_remarks = str_sub(list_remarks, 1, 40))


p<-ggplot(health_details_fixed %>% filter(disease %in% list_dz[[i]])) +
  geom_col(aes(x = protocols, y = ct_row, fill = location_event), width = 0.7) +
  geom_text(aes(x = protocols, y = 0, 
                 label = example_remarks),
             hjust = 0, color = 'grey30'#, 
               #size = rel(.9)
            ) +
  scale_size_identity() +
  facet_grid(. ~ location_event, scales = 'free') +
  coord_flip() +
  custom_location_fill() +  
  theme_bw() +
  theme(
    legend.position = "none",
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  labs(
    title = paste0(list_dz[[i]]),
    caption = 'Text on the bars are examples of remarks for each protocol'
  )

  print(p)
  
}

```




### Other Events


```{r}
# order events

summarize_events2 <- summarize_events_by_location %>%
  filter(!(event_type %in% c('unknown', 'repro', 'health', 'lact_parameter')))%>%
  mutate(event = fct_reorder(event, count_rows, .fun = sum, .desc = FALSE)) 


ggplot(summarize_events2)+
  geom_bar(aes(x = event,
               y = count_rows, fill = location_event), stat = "identity")+
    facet_wrap(event_type ~., scales = 'free', nrow = 2)+

  # facet_wrap(factor(event_type, levels = facet_order) ~., scales = 'free', nrow = 2)+
  coord_flip()+
  #scale_fill_viridis_d()+
  custom_location_fill()+
  theme_minimal()#+
  # labs(x = "",
  #      y = "Row Count")+
  # theme(legend.position = "none",
  #       # axis.text.y = element_text(size = 6)
  #       )
  
  
#old code----------------
# summarize_events <- summarize_events %>%
#   mutate(event = fct_reorder(event, count_rows, .fun = sum, .desc = FALSE)) 
# 
#   ggplot(summarize_events)+
#   geom_bar(aes(x = event,
#                y = count_rows, fill = event_type), stat = "identity")+
#   facet_wrap(factor(event_type, levels = facet_order) ~., scales = 'free')+
#   coord_flip()+
#   scale_fill_viridis_d()+
#   theme_minimal()+
#   labs(x = "",
#        y = "Row Count")+
#   theme(legend.position = "none",
#         # axis.text.y = element_text(size = 6)
#         )
#   
#   

```

### Unclassified Events


```{r}
# order events
summarize_events <- summarize_events_by_location %>%
  filter((event_type %in% c('unknown')))%>%
  mutate(event = fct_reorder(event, count_rows, .fun = sum, .desc = FALSE)) %>%
  filter(count_rows>100)

```


```{r}
#| fig-height: 11

get_locations<-sort(unique(summarize_events$location_event))
#i=1
for (i in seq_along(get_locations)){
  
#   plot_data<-summarize_events%>%
#     filter(location_event %in% get_locations[[i]])
#   
#   
#   facet_order_herd <- plot_data%>%
#   group_by(event_type) %>%
#   summarise(n_y = n_distinct(event)) %>%
#   arrange(desc(n_y)) %>%  # Order by most y categories
#   pull(event_type)
#   
#   
# plot_data2 <- plot_data %>%
#   mutate(event = fct_reorder(event, count_rows, .fun = sum, .desc = FALSE)) 


plot_data <- summarize_events%>%
  mutate(event2 = factor(event, 
                         levels = sort(unique(summarize_events$event))))

ggplot(plot_data) +
  geom_bar(aes(x = event2,
               y = count_rows,
               fill = location_event), stat = "identity") +
  facet_wrap(event_type ~ ., scales = "free", nrow = 2) +
  coord_flip() +
  scale_fill_viridis_d() +
  theme_minimal()
}
  
```


# Table of events by Herd

```{r}
fxn_DT_base(summarize_events_by_location%>%
              mutate(location_event = factor(location_event))%>%
              select(-plot_order))
```




