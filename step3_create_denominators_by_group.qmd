---
title: "Create Denominators"
format: 
  html:
    embed-resources: true
editor: source
execute:
  echo: true
  message: false
  warning: false
params:
  denominator_granularity: 90
---

```{r}
library(tidyverse)
library(arrow)
library(dtplyr)

source('functions/DT_base.R')
source('functions/fxn_denominator_eligibility.R')

```

```{r}
#denominator base files -------------------
animals<-read_parquet('data/intermediate_files/animals.parquet') #each row is an animal

animal_lactations<-read_parquet('data/intermediate_files/animal_lactations.parquet') #each row is an animal lactation

animal_event_existance<-read_parquet('data/intermediate_files/events_all_columns.parquet')%>% #add a few parameters to animal
  mutate(lact = parse_number(LACT))%>%
  group_by(id_animal)%>%
  summarize(animal_location_event_list = paste0(sort(unique(location_event)), collapse = ','), 
            animal_lact_min = min(lact), 
            animal_lact_max = max(lact), 
            animal_date_event_min = min(date_event, na.rm = TRUE), 
            animal_date_event_max = max(date_event, na.rm = TRUE))%>%
  ungroup()


#---------------------------
data_pull_min<-min(animals$data_pull_date_min)
data_pull_max<-max(animals$data_pull_date_max)

```


## define calendar days 

This creates a list of calendar days from 1200 days prior to the most recent event date

```{r}
#get a list of dates for 1200 days before the last event
calendar<-tibble(date_calendar = seq.Date(from = data_pull_max-1200, to = data_pull_max, by = params$denominator_granularity))
```


## define list of animals

This is the base data for denominator calculations.  
Each row is a unique animal lactation (id_animal). 
This is then joined to the animal data to make sure all dates for eligibility are availible if needed.  

In this base version of denominators, an animal is eligible to be counted if she exists on the reference day.  
Code can easily be modified to accept other eligibility criteria.

```{r}
#base data frame for denominator.  Each row is an animal lactation, joined to animal data so that all important dates are available
deno_base<-animal_lactations |> 
  left_join(animals) %>%
  left_join(animal_event_existance)

deno_all_lact<-deno_base%>%
  fxn_deno_eligible_entire_lactation() #animals are eligible the entire lactation

deno_milking<-deno_base%>%
  fxn_deno_eligible_milking() #animals are eligible only when milking

deno_dry<-deno_base%>%
  fxn_deno_eligible_dry() #animals are eligible only when dry

```


```{r, fig.height=12}
sk_deno<-skimr::skim(deno_base)

ggplot(sk_deno)+
  geom_bar(aes(x = reorder(skim_variable, complete_rate), y = complete_rate, fill = skim_type), 
           stat = 'identity')+
  facet_wrap(skim_type~., scales = 'free', ncol = 1)+
  coord_flip()+
  scale_fill_viridis_d()

```




## Count cows on each calendar day for differnt lacation groups

This loops over the list of calendar days and counts the number of eligible cows each date.  It prints out the date as it does it so you can see progress.  The loop speed is pretty much the same regardless of how many rows (animals) are in the base data.  The speed is limited by the length of the list of calendar dates until very very large herds are used.

```{r, message = FALSE}

#set_deno_base_type<-deno_all_lact
set_deno_base_type<-deno_dry
#set_deno_base_type<-deno_dry

#make a place to put the results
deno_dataframe<-NULL


#i = 324
for (i in seq_along(calendar$date_calendar)){
  
  #faster------------------------------------------
  df<-set_deno_base_type%>%
    #test%>%
    mutate(date_ref = calendar$date_calendar[[i]])%>%
    mutate(eligible = case_when(
      ((date_elig_start<=date_ref)&(date_elig_end>date_ref))~1, #inclusive at begining but not end
      TRUE~0
    ))
  
  df2<-df%>%
    group_by(animal_location_event_list, lact_group_basic, date_ref) |> 
    summarize(ct_animals = sum(eligible))%>%
    ungroup() |> 
    rename(`Lactation Group` = lact_group_basic)
  
  df3<-df%>%
    group_by(animal_location_event_list, lact_group, date_ref) |> 
    summarize(ct_animals = sum(eligible))%>%
    ungroup()|> 
    rename(`Lactation Group` = lact_group)
  
  df4<-df%>%
    group_by(animal_location_event_list, lact_group_5, date_ref) |> 
    summarize(ct_animals = sum(eligible))%>%
    ungroup()|> 
    rename(`Lactation Group` = lact_group_5)
  
 
  #final df---------------------------
  df10<-bind_rows(df2, df3, df4)%>%
    distinct()
  
  deno_dataframe <-bind_rows(deno_dataframe, df10) 
  
  print(calendar$date_calendar[[i]])
    
}
  




```




## Plot Counts by Lactation Groups

This is a plot of the granular dataframe.  It displays the count of cows on each reference date.

```{r}
#fast method-------------------
ggplot(deno_dataframe)+
  geom_point(aes(x = date_ref, y = ct_animals, color = `Lactation Group`))+
  ylim(c(0, NA))+
  facet_wrap(animal_location_event_list~.)

```




## Granular denominator

For most reporting the time period reported will be longer than one day.  However, here is the most granular denominator. 

```{r}

denominator_granular<-deno_dataframe%>%
  #filter(eligible %in% 'eligible')%>%
  rename(date_calendar = date_ref)%>%
  mutate(floordate_calendar_year = floor_date(date_calendar, unit = 'years'),
         floordate_calendar_season = floor_date(date_calendar, unit = 'seasons'),
         floordate_calendar_month = floor_date(date_calendar, unit = 'months'),
         floordate_calendar_week = floor_date(date_calendar, unit = 'weeks') )%>%
  select(`Lactation Group`, ct_animals, contains('date'))

write_parquet(denominator_granular, 'data/intermediate_files/denominator_granular_lactation_groups.parquet')


#display table--------------------
fxn_DT_base(head(denominator_granular, 500))

```

## Time period denominators

The very granular data frame is s summarized to make reporting easier. 
The options shown here for summary time periods are year, season, month, and week.  
Any option is available, the time period start an end dates just need to be defined.

```{r}

fxn_create_deno<-function(time_period){
  denominator_granular%>%
    group_by(`Lactation Group`, {{time_period}})%>%
    #group_by(`Lactation Group`, floordate_calendar_year)%>%
    summarize(time_period_start = min(date_calendar), 
              time_period_end = max(date_calendar), 
              animal_count_mean = round(mean(ct_animals), digits = 0), 
              animal_count_sd = round(sd(ct_animals), digits = 0), 
              animal_count_min = min(ct_animals), 
              animal_count_max = max(ct_animals))%>%
    ungroup()%>%
    mutate(date_calendar = {{time_period}})
}

denominator_year<-fxn_create_deno(time_period = floordate_calendar_year)
denominator_season<-fxn_create_deno(time_period = floordate_calendar_season)
denominator_month<-fxn_create_deno(time_period = floordate_calendar_month)
denominator_week<-fxn_create_deno(time_period = floordate_calendar_week)

denominator_time_period<-bind_rows(denominator_year, denominator_season, denominator_month, denominator_week)%>%
  select(`Lactation Group`, date_calendar, contains('time_period'), contains('animal'), contains('floordate'))%>%
  mutate(time_period_type = case_when(
    (is.na(floordate_calendar_year)<1)~'year', 
    (is.na(floordate_calendar_season)<1)~'season', 
    (is.na(floordate_calendar_month)<1)~'month', 
    (is.na(floordate_calendar_week)<1)~'week', 
    TRUE~'unknown')
  )%>%
    select(time_period_type, everything())


write_parquet(denominator_time_period, 'data/intermediate_files/denominator_by_lact_group.parquet')

#display table-----------------
fxn_DT_base(denominator_time_period)
```


### Plot time period denominators

```{r}

ggplot(denominator_time_period)+
  

```




## Denominators by day of phase (under development)

### Count cows on each calendar day for different dim groups

This loops over the list of calendar days and counts the number of eligible cows each date.  It prints out the date as it does it so you can see progress.  The loop speed is pretty much the same regardless of how many rows (animals) are in the base data.  The speed is limited by the length of the list of calendar dates until very very large herds are used.

```{r, message = FALSE}


#make a place to put the results
deno_dataframe_phase<-NULL

#i = 1
for (i in seq_along(calendar$date_calendar)){
  
  #faster------------------------------------------
  df<-deno_base%>%
    #test%>%
    mutate(date_ref = calendar$date_calendar[[i]])%>%
    mutate(
      eligible_0_30 = case_when(
      ((date_elig_start<=date_ref)&(date_dim30>date_ref))~1, #inclusive at begining but not end
      TRUE~0), 
      
      eligible_31_60 = case_when(
      ((date_dim30<=date_ref)&(date_dim60>date_ref))~1, #inclusive at begining but not end
      TRUE~0), 
      
      eligible_61_90 = case_when(
      ((date_dim60<=date_ref)&(date_dim90>date_ref))~1, #inclusive at begining but not end
      TRUE~0), 
      
      eligible_91_120 = case_when(
      ((date_dim90<=date_ref)&(date_dim120>date_ref))~1, #inclusive at begining but not end
      TRUE~0), 
      
      eligible_121_150 = case_when(
      ((date_dim120<=date_ref)&(date_dim150>date_ref))~1, #inclusive at begining but not end
      TRUE~0), 
      
      eligible_151_200 = case_when(
      ((date_dim150<=date_ref)&(date_dim200>date_ref))~1, #inclusive at begining but not end
      TRUE~0), 
      
      eligible_201_305 = case_when(
      ((date_dim200<=date_ref)&(date_dim305>date_ref))~1, #inclusive at begining but not end
      TRUE~0)
      )
  
  
  
  
  
  df3<-df%>%
    group_by(animal_location_event_list, lact_group, date_ref) |> 
    summarize(ct_animals_0_30 = sum(eligible_0_30), 
              ct_animals_31_60 = sum(eligible_31_60), 
              ct_animals_61_90 = sum(eligible_61_90), 
              ct_animals_91_120 = sum(eligible_91_120), 
              ct_animals_121_150 = sum(eligible_121_150), 
              ct_animals_151_200 = sum(eligible_151_200), 
              ct_animals_201_305 = sum(eligible_201_305)
              )%>%
    ungroup()|> 
    rename(`Lactation Group` = lact_group)
  
  df4<-df%>%
    group_by(animal_location_event_list, lact_group_5, date_ref) |> 
    summarize(ct_animals_0_30 = sum(eligible_0_30, na.rm = TRUE), 
              ct_animals_31_60 = sum(eligible_31_60, na.rm = TRUE), 
              ct_animals_61_90 = sum(eligible_61_90, na.rm = TRUE), 
              ct_animals_91_120 = sum(eligible_91_120, na.rm = TRUE), 
              ct_animals_121_150 = sum(eligible_121_150, na.rm = TRUE), 
              ct_animals_151_200 = sum(eligible_151_200, na.rm = TRUE), 
              ct_animals_201_305 = sum(eligible_201_305, na.rm = TRUE)
              )%>%
    ungroup()|> 
    rename(`Lactation Group` = lact_group_5)
  
 
  #final df---------------------------
  df10<-bind_rows(df3, df4)%>%
    distinct()
  
  deno_dataframe_phase <-bind_rows(deno_dataframe, df10) 
  
  print(calendar$date_calendar[[i]])
    
}

deno_dataframe_phase_long<-deno_dataframe_phase%>%
  pivot_longer(cols = c("ct_animals_0_30", "ct_animals_31_60", "ct_animals_61_90", 
                        "ct_animals_91_120", "ct_animals_121_150", "ct_animals_151_200", "ct_animals_201_305"),
               names_to = 'phase_category', 
               values_to = 'ct_animals_in_phase')
  

```


### plot phase denominators


```{r}

ggplot(deno_dataframe_phase_long)+
  geom_point(aes(x = date_ref, y = ct_animals_in_phase, color = `Lactation Group`))+
  ylim(c(0, NA))+
  facet_wrap(animal_location_event_list~.)

```




